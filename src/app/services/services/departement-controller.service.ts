/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createDepartement } from '../fn/departement-controller/create-departement';
import { CreateDepartement$Params } from '../fn/departement-controller/create-departement';
import { deleteDepartement } from '../fn/departement-controller/delete-departement';
import { DeleteDepartement$Params } from '../fn/departement-controller/delete-departement';
import { Departement } from '../models/departement';
import { DepartementReadRequest } from '../models/departement-read-request';
import { getAllDepartements } from '../fn/departement-controller/get-all-departements';
import { GetAllDepartements$Params } from '../fn/departement-controller/get-all-departements';
import { getDepartementById } from '../fn/departement-controller/get-departement-by-id';
import { GetDepartementById$Params } from '../fn/departement-controller/get-departement-by-id';
import { updateDepartement } from '../fn/departement-controller/update-departement';
import { UpdateDepartement$Params } from '../fn/departement-controller/update-departement';

@Injectable({ providedIn: 'root' })
export class DepartementControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateDepartement()` */
  static readonly UpdateDepartementPath = '/api/v1/departements/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateDepartement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDepartement$Response(params: UpdateDepartement$Params, context?: HttpContext): Observable<StrictHttpResponse<Departement>> {
    return updateDepartement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateDepartement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDepartement(params: UpdateDepartement$Params, context?: HttpContext): Observable<Departement> {
    return this.updateDepartement$Response(params, context).pipe(
      map((r: StrictHttpResponse<Departement>): Departement => r.body)
    );
  }

  /** Path part for operation `getAllDepartements()` */
  static readonly GetAllDepartementsPath = '/api/v1/departements';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDepartements()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDepartements$Response(params?: GetAllDepartements$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DepartementReadRequest>>> {
    return getAllDepartements(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDepartements$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDepartements(params?: GetAllDepartements$Params, context?: HttpContext): Observable<Array<DepartementReadRequest>> {
    return this.getAllDepartements$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DepartementReadRequest>>): Array<DepartementReadRequest> => r.body)
    );
  }

  /** Path part for operation `createDepartement()` */
  static readonly CreateDepartementPath = '/api/v1/departements';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createDepartement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDepartement$Response(params: CreateDepartement$Params, context?: HttpContext): Observable<StrictHttpResponse<Departement>> {
    return createDepartement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createDepartement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDepartement(params: CreateDepartement$Params, context?: HttpContext): Observable<Departement> {
    return this.createDepartement$Response(params, context).pipe(
      map((r: StrictHttpResponse<Departement>): Departement => r.body)
    );
  }

  /** Path part for operation `getDepartementById()` */
  static readonly GetDepartementByIdPath = '/api/v1/departements/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDepartementById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDepartementById$Response(params: GetDepartementById$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartementReadRequest>> {
    return getDepartementById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDepartementById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDepartementById(params: GetDepartementById$Params, context?: HttpContext): Observable<DepartementReadRequest> {
    return this.getDepartementById$Response(params, context).pipe(
      map((r: StrictHttpResponse<DepartementReadRequest>): DepartementReadRequest => r.body)
    );
  }

  /** Path part for operation `deleteDepartement()` */
  static readonly DeleteDepartementPath = '/api/v1/departements/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDepartement()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDepartement$Response(params: DeleteDepartement$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteDepartement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDepartement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDepartement(params: DeleteDepartement$Params, context?: HttpContext): Observable<void> {
    return this.deleteDepartement$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
