/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createPointage } from '../fn/pointage-controller/create-pointage';
import { CreatePointage$Params } from '../fn/pointage-controller/create-pointage';
import { deletePointage } from '../fn/pointage-controller/delete-pointage';
import { DeletePointage$Params } from '../fn/pointage-controller/delete-pointage';
import { getPointage } from '../fn/pointage-controller/get-pointage';
import { GetPointage$Params } from '../fn/pointage-controller/get-pointage';
import { getPointageById } from '../fn/pointage-controller/get-pointage-by-id';
import { GetPointageById$Params } from '../fn/pointage-controller/get-pointage-by-id';
import { Pointage } from '../models/pointage';
import { updatePointage } from '../fn/pointage-controller/update-pointage';
import { UpdatePointage$Params } from '../fn/pointage-controller/update-pointage';

@Injectable({ providedIn: 'root' })
export class PointageControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getPointageById()` */
  static readonly GetPointageByIdPath = '/pointage/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPointageById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPointageById$Response(params: GetPointageById$Params, context?: HttpContext): Observable<StrictHttpResponse<Pointage>> {
    return getPointageById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPointageById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPointageById(params: GetPointageById$Params, context?: HttpContext): Observable<Pointage> {
    return this.getPointageById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pointage>): Pointage => r.body)
    );
  }

  /** Path part for operation `updatePointage()` */
  static readonly UpdatePointagePath = '/pointage/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePointage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePointage$Response(params: UpdatePointage$Params, context?: HttpContext): Observable<StrictHttpResponse<Pointage>> {
    return updatePointage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePointage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePointage(params: UpdatePointage$Params, context?: HttpContext): Observable<Pointage> {
    return this.updatePointage$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pointage>): Pointage => r.body)
    );
  }

  /** Path part for operation `deletePointage()` */
  static readonly DeletePointagePath = '/pointage/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePointage()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePointage$Response(params: DeletePointage$Params, context?: HttpContext): Observable<StrictHttpResponse<Pointage>> {
    return deletePointage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePointage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePointage(params: DeletePointage$Params, context?: HttpContext): Observable<Pointage> {
    return this.deletePointage$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pointage>): Pointage => r.body)
    );
  }

  /** Path part for operation `getPointage()` */
  static readonly GetPointagePath = '/pointage';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPointage()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPointage$Response(params?: GetPointage$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Pointage>>> {
    return getPointage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPointage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPointage(params?: GetPointage$Params, context?: HttpContext): Observable<Array<Pointage>> {
    return this.getPointage$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Pointage>>): Array<Pointage> => r.body)
    );
  }

  /** Path part for operation `createPointage()` */
  static readonly CreatePointagePath = '/pointage';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createPointage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPointage$Response(params: CreatePointage$Params, context?: HttpContext): Observable<StrictHttpResponse<Pointage>> {
    return createPointage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createPointage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPointage(params: CreatePointage$Params, context?: HttpContext): Observable<Pointage> {
    return this.createPointage$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pointage>): Pointage => r.body)
    );
  }

}
