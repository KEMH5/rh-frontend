/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createFormation } from '../fn/formation-controller/create-formation';
import { CreateFormation$Params } from '../fn/formation-controller/create-formation';
import { deleteFormation } from '../fn/formation-controller/delete-formation';
import { DeleteFormation$Params } from '../fn/formation-controller/delete-formation';
import { Formation } from '../models/formation';
import { getAllFormations } from '../fn/formation-controller/get-all-formations';
import { GetAllFormations$Params } from '../fn/formation-controller/get-all-formations';
import { getFormationById } from '../fn/formation-controller/get-formation-by-id';
import { GetFormationById$Params } from '../fn/formation-controller/get-formation-by-id';
import { updateFormation } from '../fn/formation-controller/update-formation';
import { UpdateFormation$Params } from '../fn/formation-controller/update-formation';

@Injectable({ providedIn: 'root' })
export class FormationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateFormation()` */
  static readonly UpdateFormationPath = '/formations/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateFormation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFormation$Response(params: UpdateFormation$Params, context?: HttpContext): Observable<StrictHttpResponse<Formation>> {
    return updateFormation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateFormation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFormation(params: UpdateFormation$Params, context?: HttpContext): Observable<Formation> {
    return this.updateFormation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Formation>): Formation => r.body)
    );
  }

  /** Path part for operation `getAllFormations()` */
  static readonly GetAllFormationsPath = '/formations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllFormations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFormations$Response(params?: GetAllFormations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Formation>>> {
    return getAllFormations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllFormations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFormations(params?: GetAllFormations$Params, context?: HttpContext): Observable<Array<Formation>> {
    return this.getAllFormations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Formation>>): Array<Formation> => r.body)
    );
  }

  /** Path part for operation `createFormation()` */
  static readonly CreateFormationPath = '/formations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createFormation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFormation$Response(params: CreateFormation$Params, context?: HttpContext): Observable<StrictHttpResponse<Formation>> {
    return createFormation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createFormation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFormation(params: CreateFormation$Params, context?: HttpContext): Observable<Formation> {
    return this.createFormation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Formation>): Formation => r.body)
    );
  }

  /** Path part for operation `getFormationById()` */
  static readonly GetFormationByIdPath = '/formations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFormationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFormationById$Response(params: GetFormationById$Params, context?: HttpContext): Observable<StrictHttpResponse<Formation>> {
    return getFormationById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFormationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFormationById(params: GetFormationById$Params, context?: HttpContext): Observable<Formation> {
    return this.getFormationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Formation>): Formation => r.body)
    );
  }

  /** Path part for operation `deleteFormation()` */
  static readonly DeleteFormationPath = '/formations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFormation()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFormation$Response(params: DeleteFormation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteFormation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFormation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFormation(params: DeleteFormation$Params, context?: HttpContext): Observable<void> {
    return this.deleteFormation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
