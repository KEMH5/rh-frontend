/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createRoleUtilisateur } from '../fn/role-utilisateur-controller/create-role-utilisateur';
import { CreateRoleUtilisateur$Params } from '../fn/role-utilisateur-controller/create-role-utilisateur';
import { deleteRoleUtilisateurById } from '../fn/role-utilisateur-controller/delete-role-utilisateur-by-id';
import { DeleteRoleUtilisateurById$Params } from '../fn/role-utilisateur-controller/delete-role-utilisateur-by-id';
import { getAllRoleUtilisateur } from '../fn/role-utilisateur-controller/get-all-role-utilisateur';
import { GetAllRoleUtilisateur$Params } from '../fn/role-utilisateur-controller/get-all-role-utilisateur';
import { getRoleUtilisateurById } from '../fn/role-utilisateur-controller/get-role-utilisateur-by-id';
import { GetRoleUtilisateurById$Params } from '../fn/role-utilisateur-controller/get-role-utilisateur-by-id';
import { RoleUtilisateur } from '../models/role-utilisateur';

@Injectable({ providedIn: 'root' })
export class RoleUtilisateurControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllRoleUtilisateur()` */
  static readonly GetAllRoleUtilisateurPath = '/api/v1/rolesUtilisateur';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRoleUtilisateur()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRoleUtilisateur$Response(params?: GetAllRoleUtilisateur$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoleUtilisateur>>> {
    return getAllRoleUtilisateur(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRoleUtilisateur$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRoleUtilisateur(params?: GetAllRoleUtilisateur$Params, context?: HttpContext): Observable<Array<RoleUtilisateur>> {
    return this.getAllRoleUtilisateur$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoleUtilisateur>>): Array<RoleUtilisateur> => r.body)
    );
  }

  /** Path part for operation `createRoleUtilisateur()` */
  static readonly CreateRoleUtilisateurPath = '/api/v1/rolesUtilisateur';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRoleUtilisateur()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRoleUtilisateur$Response(params: CreateRoleUtilisateur$Params, context?: HttpContext): Observable<StrictHttpResponse<RoleUtilisateur>> {
    return createRoleUtilisateur(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRoleUtilisateur$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRoleUtilisateur(params: CreateRoleUtilisateur$Params, context?: HttpContext): Observable<RoleUtilisateur> {
    return this.createRoleUtilisateur$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoleUtilisateur>): RoleUtilisateur => r.body)
    );
  }

  /** Path part for operation `getRoleUtilisateurById()` */
  static readonly GetRoleUtilisateurByIdPath = '/api/v1/rolesUtilisateur/{role-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRoleUtilisateurById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoleUtilisateurById$Response(params: GetRoleUtilisateurById$Params, context?: HttpContext): Observable<StrictHttpResponse<RoleUtilisateur>> {
    return getRoleUtilisateurById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRoleUtilisateurById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoleUtilisateurById(params: GetRoleUtilisateurById$Params, context?: HttpContext): Observable<RoleUtilisateur> {
    return this.getRoleUtilisateurById$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoleUtilisateur>): RoleUtilisateur => r.body)
    );
  }

  /** Path part for operation `deleteRoleUtilisateurById()` */
  static readonly DeleteRoleUtilisateurByIdPath = '/api/v1/rolesUtilisateur/{role-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRoleUtilisateurById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRoleUtilisateurById$Response(params: DeleteRoleUtilisateurById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRoleUtilisateurById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRoleUtilisateurById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRoleUtilisateurById(params: DeleteRoleUtilisateurById$Params, context?: HttpContext): Observable<void> {
    return this.deleteRoleUtilisateurById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
