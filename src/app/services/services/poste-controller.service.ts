/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addPoste } from '../fn/poste-controller/add-poste';
import { AddPoste$Params } from '../fn/poste-controller/add-poste';
import { deletePoste } from '../fn/poste-controller/delete-poste';
import { DeletePoste$Params } from '../fn/poste-controller/delete-poste';
import { getAllPostes } from '../fn/poste-controller/get-all-postes';
import { GetAllPostes$Params } from '../fn/poste-controller/get-all-postes';
import { getPoste } from '../fn/poste-controller/get-poste';
import { GetPoste$Params } from '../fn/poste-controller/get-poste';
import { Poste } from '../models/poste';

@Injectable({ providedIn: 'root' })
export class PosteControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllPostes()` */
  static readonly GetAllPostesPath = '/postes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPostes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPostes$Response(params?: GetAllPostes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Poste>>> {
    return getAllPostes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPostes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPostes(params?: GetAllPostes$Params, context?: HttpContext): Observable<Array<Poste>> {
    return this.getAllPostes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Poste>>): Array<Poste> => r.body)
    );
  }

  /** Path part for operation `addPoste()` */
  static readonly AddPostePath = '/postes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPoste()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPoste$Response(params: AddPoste$Params, context?: HttpContext): Observable<StrictHttpResponse<Poste>> {
    return addPoste(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPoste$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPoste(params: AddPoste$Params, context?: HttpContext): Observable<Poste> {
    return this.addPoste$Response(params, context).pipe(
      map((r: StrictHttpResponse<Poste>): Poste => r.body)
    );
  }

  /** Path part for operation `getPoste()` */
  static readonly GetPostePath = '/postes/{poste-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPoste()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPoste$Response(params: GetPoste$Params, context?: HttpContext): Observable<StrictHttpResponse<Poste>> {
    return getPoste(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPoste$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPoste(params: GetPoste$Params, context?: HttpContext): Observable<Poste> {
    return this.getPoste$Response(params, context).pipe(
      map((r: StrictHttpResponse<Poste>): Poste => r.body)
    );
  }

  /** Path part for operation `deletePoste()` */
  static readonly DeletePostePath = '/postes/{poste-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePoste()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePoste$Response(params: DeletePoste$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletePoste(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePoste$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePoste(params: DeletePoste$Params, context?: HttpContext): Observable<void> {
    return this.deletePoste$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
