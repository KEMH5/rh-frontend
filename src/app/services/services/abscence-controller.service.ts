/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Abscence } from '../models/abscence';
import { createAbsence } from '../fn/abscence-controller/create-absence';
import { CreateAbsence$Params } from '../fn/abscence-controller/create-absence';
import { deleteAbsence } from '../fn/abscence-controller/delete-absence';
import { DeleteAbsence$Params } from '../fn/abscence-controller/delete-absence';
import { getAllAbsences } from '../fn/abscence-controller/get-all-absences';
import { GetAllAbsences$Params } from '../fn/abscence-controller/get-all-absences';

@Injectable({ providedIn: 'root' })
export class AbscenceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllAbsences()` */
  static readonly GetAllAbsencesPath = '/absences';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAbsences()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAbsences$Response(params?: GetAllAbsences$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Abscence>>> {
    return getAllAbsences(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAbsences$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAbsences(params?: GetAllAbsences$Params, context?: HttpContext): Observable<Array<Abscence>> {
    return this.getAllAbsences$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Abscence>>): Array<Abscence> => r.body)
    );
  }

  /** Path part for operation `createAbsence()` */
  static readonly CreateAbsencePath = '/absences';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAbsence()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAbsence$Response(params: CreateAbsence$Params, context?: HttpContext): Observable<StrictHttpResponse<Abscence>> {
    return createAbsence(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAbsence$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAbsence(params: CreateAbsence$Params, context?: HttpContext): Observable<Abscence> {
    return this.createAbsence$Response(params, context).pipe(
      map((r: StrictHttpResponse<Abscence>): Abscence => r.body)
    );
  }

  /** Path part for operation `deleteAbsence()` */
  static readonly DeleteAbsencePath = '/absences/{absence-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAbsence()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAbsence$Response(params: DeleteAbsence$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAbsence(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAbsence$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAbsence(params: DeleteAbsence$Params, context?: HttpContext): Observable<void> {
    return this.deleteAbsence$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
