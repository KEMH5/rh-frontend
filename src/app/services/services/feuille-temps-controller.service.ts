/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createFeuilleDeTemps } from '../fn/feuille-temps-controller/create-feuille-de-temps';
import { CreateFeuilleDeTemps$Params } from '../fn/feuille-temps-controller/create-feuille-de-temps';
import { deleteFeuilleTemps } from '../fn/feuille-temps-controller/delete-feuille-temps';
import { DeleteFeuilleTemps$Params } from '../fn/feuille-temps-controller/delete-feuille-temps';
import { FeuilleTemps } from '../models/feuille-temps';
import { getAllFeuilleDeTemps } from '../fn/feuille-temps-controller/get-all-feuille-de-temps';
import { GetAllFeuilleDeTemps$Params } from '../fn/feuille-temps-controller/get-all-feuille-de-temps';
import { getFeuilleDeTemps } from '../fn/feuille-temps-controller/get-feuille-de-temps';
import { GetFeuilleDeTemps$Params } from '../fn/feuille-temps-controller/get-feuille-de-temps';
import { updateFeuilleTemps } from '../fn/feuille-temps-controller/update-feuille-temps';
import { UpdateFeuilleTemps$Params } from '../fn/feuille-temps-controller/update-feuille-temps';

@Injectable({ providedIn: 'root' })
export class FeuilleTempsControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getFeuilleDeTemps()` */
  static readonly GetFeuilleDeTempsPath = '/feuilles/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFeuilleDeTemps()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeuilleDeTemps$Response(params: GetFeuilleDeTemps$Params, context?: HttpContext): Observable<StrictHttpResponse<FeuilleTemps>> {
    return getFeuilleDeTemps(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFeuilleDeTemps$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeuilleDeTemps(params: GetFeuilleDeTemps$Params, context?: HttpContext): Observable<FeuilleTemps> {
    return this.getFeuilleDeTemps$Response(params, context).pipe(
      map((r: StrictHttpResponse<FeuilleTemps>): FeuilleTemps => r.body)
    );
  }

  /** Path part for operation `updateFeuilleTemps()` */
  static readonly UpdateFeuilleTempsPath = '/feuilles/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateFeuilleTemps()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFeuilleTemps$Response(params: UpdateFeuilleTemps$Params, context?: HttpContext): Observable<StrictHttpResponse<FeuilleTemps>> {
    return updateFeuilleTemps(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateFeuilleTemps$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFeuilleTemps(params: UpdateFeuilleTemps$Params, context?: HttpContext): Observable<FeuilleTemps> {
    return this.updateFeuilleTemps$Response(params, context).pipe(
      map((r: StrictHttpResponse<FeuilleTemps>): FeuilleTemps => r.body)
    );
  }

  /** Path part for operation `deleteFeuilleTemps()` */
  static readonly DeleteFeuilleTempsPath = '/feuilles/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFeuilleTemps()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFeuilleTemps$Response(params: DeleteFeuilleTemps$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteFeuilleTemps(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFeuilleTemps$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFeuilleTemps(params: DeleteFeuilleTemps$Params, context?: HttpContext): Observable<void> {
    return this.deleteFeuilleTemps$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllFeuilleDeTemps()` */
  static readonly GetAllFeuilleDeTempsPath = '/feuilles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllFeuilleDeTemps()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFeuilleDeTemps$Response(params?: GetAllFeuilleDeTemps$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FeuilleTemps>>> {
    return getAllFeuilleDeTemps(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllFeuilleDeTemps$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFeuilleDeTemps(params?: GetAllFeuilleDeTemps$Params, context?: HttpContext): Observable<Array<FeuilleTemps>> {
    return this.getAllFeuilleDeTemps$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FeuilleTemps>>): Array<FeuilleTemps> => r.body)
    );
  }

  /** Path part for operation `createFeuilleDeTemps()` */
  static readonly CreateFeuilleDeTempsPath = '/feuilles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createFeuilleDeTemps()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFeuilleDeTemps$Response(params: CreateFeuilleDeTemps$Params, context?: HttpContext): Observable<StrictHttpResponse<FeuilleTemps>> {
    return createFeuilleDeTemps(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createFeuilleDeTemps$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFeuilleDeTemps(params: CreateFeuilleDeTemps$Params, context?: HttpContext): Observable<FeuilleTemps> {
    return this.createFeuilleDeTemps$Response(params, context).pipe(
      map((r: StrictHttpResponse<FeuilleTemps>): FeuilleTemps => r.body)
    );
  }

}
