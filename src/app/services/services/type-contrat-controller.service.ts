/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTypeContrat } from '../fn/type-contrat-controller/create-type-contrat';
import { CreateTypeContrat$Params } from '../fn/type-contrat-controller/create-type-contrat';
import { deleteTypeContratById } from '../fn/type-contrat-controller/delete-type-contrat-by-id';
import { DeleteTypeContratById$Params } from '../fn/type-contrat-controller/delete-type-contrat-by-id';
import { getAllTypeContrats } from '../fn/type-contrat-controller/get-all-type-contrats';
import { GetAllTypeContrats$Params } from '../fn/type-contrat-controller/get-all-type-contrats';
import { getTypeContratById } from '../fn/type-contrat-controller/get-type-contrat-by-id';
import { GetTypeContratById$Params } from '../fn/type-contrat-controller/get-type-contrat-by-id';
import { getTypeContratByName } from '../fn/type-contrat-controller/get-type-contrat-by-name';
import { GetTypeContratByName$Params } from '../fn/type-contrat-controller/get-type-contrat-by-name';
import { TypeContrat } from '../models/type-contrat';

@Injectable({ providedIn: 'root' })
export class TypeContratControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllTypeContrats()` */
  static readonly GetAllTypeContratsPath = '/auth/typeContrats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTypeContrats()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTypeContrats$Response(params?: GetAllTypeContrats$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TypeContrat>>> {
    return getAllTypeContrats(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTypeContrats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTypeContrats(params?: GetAllTypeContrats$Params, context?: HttpContext): Observable<Array<TypeContrat>> {
    return this.getAllTypeContrats$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TypeContrat>>): Array<TypeContrat> => r.body)
    );
  }

  /** Path part for operation `createTypeContrat()` */
  static readonly CreateTypeContratPath = '/auth/typeContrats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTypeContrat()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTypeContrat$Response(params: CreateTypeContrat$Params, context?: HttpContext): Observable<StrictHttpResponse<TypeContrat>> {
    return createTypeContrat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTypeContrat$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTypeContrat(params: CreateTypeContrat$Params, context?: HttpContext): Observable<TypeContrat> {
    return this.createTypeContrat$Response(params, context).pipe(
      map((r: StrictHttpResponse<TypeContrat>): TypeContrat => r.body)
    );
  }

  /** Path part for operation `getTypeContratById()` */
  static readonly GetTypeContratByIdPath = '/auth/typeContrats/{typecontrat-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTypeContratById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTypeContratById$Response(params: GetTypeContratById$Params, context?: HttpContext): Observable<StrictHttpResponse<TypeContrat>> {
    return getTypeContratById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTypeContratById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTypeContratById(params: GetTypeContratById$Params, context?: HttpContext): Observable<TypeContrat> {
    return this.getTypeContratById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TypeContrat>): TypeContrat => r.body)
    );
  }

  /** Path part for operation `getTypeContratByName()` */
  static readonly GetTypeContratByNamePath = '/auth/typeContrats/{typeContrat-name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTypeContratByName()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTypeContratByName$Response(params: GetTypeContratByName$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TypeContrat>>> {
    return getTypeContratByName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTypeContratByName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTypeContratByName(params: GetTypeContratByName$Params, context?: HttpContext): Observable<Array<TypeContrat>> {
    return this.getTypeContratByName$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TypeContrat>>): Array<TypeContrat> => r.body)
    );
  }

  /** Path part for operation `deleteTypeContratById()` */
  static readonly DeleteTypeContratByIdPath = '/auth/typeContrats/{typeContrat-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTypeContratById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTypeContratById$Response(params: DeleteTypeContratById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTypeContratById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTypeContratById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTypeContratById(params: DeleteTypeContratById$Params, context?: HttpContext): Observable<void> {
    return this.deleteTypeContratById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
