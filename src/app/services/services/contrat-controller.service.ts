/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Contrat } from '../models/contrat';
import { createContrat } from '../fn/contrat-controller/create-contrat';
import { CreateContrat$Params } from '../fn/contrat-controller/create-contrat';
import { delete$ } from '../fn/contrat-controller/delete';
import { Delete$Params } from '../fn/contrat-controller/delete';
import { getAllContrats } from '../fn/contrat-controller/get-all-contrats';
import { GetAllContrats$Params } from '../fn/contrat-controller/get-all-contrats';
import { getContratById } from '../fn/contrat-controller/get-contrat-by-id';
import { GetContratById$Params } from '../fn/contrat-controller/get-contrat-by-id';

@Injectable({ providedIn: 'root' })
export class ContratControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllContrats()` */
  static readonly GetAllContratsPath = '/contrats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllContrats()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllContrats$Response(params?: GetAllContrats$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Contrat>>> {
    return getAllContrats(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllContrats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllContrats(params?: GetAllContrats$Params, context?: HttpContext): Observable<Array<Contrat>> {
    return this.getAllContrats$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Contrat>>): Array<Contrat> => r.body)
    );
  }

  /** Path part for operation `createContrat()` */
  static readonly CreateContratPath = '/contrats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createContrat()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createContrat$Response(params: CreateContrat$Params, context?: HttpContext): Observable<StrictHttpResponse<Contrat>> {
    return createContrat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createContrat$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createContrat(params: CreateContrat$Params, context?: HttpContext): Observable<Contrat> {
    return this.createContrat$Response(params, context).pipe(
      map((r: StrictHttpResponse<Contrat>): Contrat => r.body)
    );
  }

  /** Path part for operation `getContratById()` */
  static readonly GetContratByIdPath = '/contrats/{contrat-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getContratById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getContratById$Response(params: GetContratById$Params, context?: HttpContext): Observable<StrictHttpResponse<Contrat>> {
    return getContratById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getContratById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getContratById(params: GetContratById$Params, context?: HttpContext): Observable<Contrat> {
    return this.getContratById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Contrat>): Contrat => r.body)
    );
  }

  /** Path part for operation `delete()` */
  static readonly DeletePath = '/contrats/{contrat-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete$Response(params: Delete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete(params: Delete$Params, context?: HttpContext): Observable<void> {
    return this.delete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
