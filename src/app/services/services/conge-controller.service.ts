/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Conge } from '../models/conge';
import { createConge } from '../fn/conge-controller/create-conge';
import { CreateConge$Params } from '../fn/conge-controller/create-conge';
import { deleteConge } from '../fn/conge-controller/delete-conge';
import { DeleteConge$Params } from '../fn/conge-controller/delete-conge';
import { getAllConge } from '../fn/conge-controller/get-all-conge';
import { GetAllConge$Params } from '../fn/conge-controller/get-all-conge';
import { getConge } from '../fn/conge-controller/get-conge';
import { GetConge$Params } from '../fn/conge-controller/get-conge';
import { updateConge } from '../fn/conge-controller/update-conge';
import { UpdateConge$Params } from '../fn/conge-controller/update-conge';

@Injectable({ providedIn: 'root' })
export class CongeControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateConge()` */
  static readonly UpdateCongePath = '/conges/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateConge()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateConge$Response(params: UpdateConge$Params, context?: HttpContext): Observable<StrictHttpResponse<Conge>> {
    return updateConge(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateConge$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateConge(params: UpdateConge$Params, context?: HttpContext): Observable<Conge> {
    return this.updateConge$Response(params, context).pipe(
      map((r: StrictHttpResponse<Conge>): Conge => r.body)
    );
  }

  /** Path part for operation `deleteConge()` */
  static readonly DeleteCongePath = '/conges/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteConge()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteConge$Response(params: DeleteConge$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteConge(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteConge$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteConge(params: DeleteConge$Params, context?: HttpContext): Observable<void> {
    return this.deleteConge$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllConge()` */
  static readonly GetAllCongePath = '/conges';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllConge()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllConge$Response(params?: GetAllConge$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Conge>>> {
    return getAllConge(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllConge$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllConge(params?: GetAllConge$Params, context?: HttpContext): Observable<Array<Conge>> {
    return this.getAllConge$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Conge>>): Array<Conge> => r.body)
    );
  }

  /** Path part for operation `createConge()` */
  static readonly CreateCongePath = '/conges';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createConge()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createConge$Response(params: CreateConge$Params, context?: HttpContext): Observable<StrictHttpResponse<Conge>> {
    return createConge(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createConge$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createConge(params: CreateConge$Params, context?: HttpContext): Observable<Conge> {
    return this.createConge$Response(params, context).pipe(
      map((r: StrictHttpResponse<Conge>): Conge => r.body)
    );
  }

  /** Path part for operation `getConge()` */
  static readonly GetCongePath = '/conges/conge/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getConge()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConge$Response(params: GetConge$Params, context?: HttpContext): Observable<StrictHttpResponse<Conge>> {
    return getConge(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getConge$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConge(params: GetConge$Params, context?: HttpContext): Observable<Conge> {
    return this.getConge$Response(params, context).pipe(
      map((r: StrictHttpResponse<Conge>): Conge => r.body)
    );
  }

}
